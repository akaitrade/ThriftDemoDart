/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library general.src.variant;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'class_object.dart';
import 'object.dart';
import 'amount.dart';
import 'variant.dart';
import 'annotation.dart';
import 'method_argument.dart';
import 'method_description.dart';
import 'byte_code_object.dart';
import 'method_signature.dart';
import 'method_short_argument.dart';
import 'method_short_description.dart';
import 'api_response.dart';

class Variant implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("Variant");
  static final TField _V_NULL_FIELD_DESC = TField("v_null", TType.STRING, 1);
  static final TField _V_VOID_FIELD_DESC = TField("v_void", TType.BYTE, 2);
  static final TField _V_BOOLEAN_FIELD_DESC = TField("v_boolean", TType.BOOL, 3);
  static final TField _V_BOOLEAN_BOX_FIELD_DESC = TField("v_boolean_box", TType.BOOL, 4);
  static final TField _V_BYTE_FIELD_DESC = TField("v_byte", TType.BYTE, 5);
  static final TField _V_BYTE_BOX_FIELD_DESC = TField("v_byte_box", TType.BYTE, 6);
  static final TField _V_SHORT_FIELD_DESC = TField("v_short", TType.I16, 7);
  static final TField _V_SHORT_BOX_FIELD_DESC = TField("v_short_box", TType.I16, 8);
  static final TField _V_INT_FIELD_DESC = TField("v_int", TType.I32, 9);
  static final TField _V_INT_BOX_FIELD_DESC = TField("v_int_box", TType.I32, 10);
  static final TField _V_LONG_FIELD_DESC = TField("v_long", TType.I64, 11);
  static final TField _V_LONG_BOX_FIELD_DESC = TField("v_long_box", TType.I64, 12);
  static final TField _V_FLOAT_FIELD_DESC = TField("v_float", TType.DOUBLE, 13);
  static final TField _V_FLOAT_BOX_FIELD_DESC = TField("v_float_box", TType.DOUBLE, 14);
  static final TField _V_DOUBLE_FIELD_DESC = TField("v_double", TType.DOUBLE, 15);
  static final TField _V_DOUBLE_BOX_FIELD_DESC = TField("v_double_box", TType.DOUBLE, 16);
  static final TField _V_STRING_FIELD_DESC = TField("v_string", TType.STRING, 17);
  static final TField _V_OBJECT_FIELD_DESC = TField("v_object", TType.STRUCT, 18);
  static final TField _V_ARRAY_FIELD_DESC = TField("v_array", TType.LIST, 19);
  static final TField _V_LIST_FIELD_DESC = TField("v_list", TType.LIST, 20);
  static final TField _V_SET_FIELD_DESC = TField("v_set", TType.SET, 21);
  static final TField _V_MAP_FIELD_DESC = TField("v_map", TType.MAP, 22);
  static final TField _V_BIG_DECIMAL_FIELD_DESC = TField("v_big_decimal", TType.STRING, 23);
  static final TField _V_AMOUNT_FIELD_DESC = TField("v_amount", TType.STRUCT, 24);
  static final TField _V_BYTE_ARRAY_FIELD_DESC = TField("v_byte_array", TType.STRING, 25);

  String? _v_null;
  static const int V_NULL = 1;
  int? _v_void;
  static const int V_VOID = 2;
  bool? _v_boolean;
  static const int V_BOOLEAN = 3;
  bool? _v_boolean_box;
  static const int V_BOOLEAN_BOX = 4;
  int? _v_byte;
  static const int V_BYTE = 5;
  int? _v_byte_box;
  static const int V_BYTE_BOX = 6;
  int? _v_short;
  static const int V_SHORT = 7;
  int? _v_short_box;
  static const int V_SHORT_BOX = 8;
  int? _v_int;
  static const int V_INT = 9;
  int? _v_int_box;
  static const int V_INT_BOX = 10;
  int? _v_long;
  static const int V_LONG = 11;
  int? _v_long_box;
  static const int V_LONG_BOX = 12;
  double? _v_float;
  static const int V_FLOAT = 13;
  double? _v_float_box;
  static const int V_FLOAT_BOX = 14;
  double? _v_double;
  static const int V_DOUBLE = 15;
  double? _v_double_box;
  static const int V_DOUBLE_BOX = 16;
  String? _v_string;
  static const int V_STRING = 17;
  object? _v_object;
  static const int V_OBJECT = 18;
  List<Variant>? _v_array;
  static const int V_ARRAY = 19;
  List<Variant>? _v_list;
  static const int V_LIST = 20;
  Set<Variant>? _v_set;
  static const int V_SET = 21;
  Map<Variant, Variant>? _v_map;
  static const int V_MAP = 22;
  String? _v_big_decimal;
  static const int V_BIG_DECIMAL = 23;
  Amount? _v_amount;
  static const int V_AMOUNT = 24;
  Uint8List? _v_byte_array;
  static const int V_BYTE_ARRAY = 25;

  //bool __isset_v_null = false;
  //bool __isset_v_void = false;
  //bool __isset_v_boolean = false;
  //bool __isset_v_boolean_box = false;
  //bool __isset_v_byte = false;
  //bool __isset_v_byte_box = false;
  //bool __isset_v_short = false;
  //bool __isset_v_short_box = false;
  //bool __isset_v_int = false;
  //bool __isset_v_int_box = false;
  //bool __isset_v_long = false;
  //bool __isset_v_long_box = false;
  //bool __isset_v_float = false;
  //bool __isset_v_float_box = false;
  //bool __isset_v_double = false;
  //bool __isset_v_double_box = false;
  //bool __isset_v_string = false;
  //bool __isset_v_object = false;
  //bool __isset_v_array = false;
  //bool __isset_v_list = false;
  //bool __isset_v_set = false;
  //bool __isset_v_map = false;
  //bool __isset_v_big_decimal = false;
  //bool __isset_v_amount = false;
  //bool __isset_v_byte_array = false;

  Variant() {
  }

  // v_null
  String? get v_null => this._v_null;

  set v_null(String? v_null) {
    this._v_null = v_null;
    //this.__isset_v_null = true;
  }

  bool isSetV_null() => this.v_null != null;

  unsetV_null() {
    this.v_null = null;
  }

  // v_void
  int? get v_void => this._v_void;

  set v_void(int? v_void) {
    this._v_void = v_void;
    //this.__isset_v_void = true;
  }

  bool isSetV_void() => this.v_void != null;

  unsetV_void() {
    this.v_void = null;
  }

  // v_boolean
  bool? get v_boolean => this._v_boolean;

  set v_boolean(bool? v_boolean) {
    this._v_boolean = v_boolean;
    //this.__isset_v_boolean = true;
  }

  bool isSetV_boolean() => this.v_boolean != null;

  unsetV_boolean() {
    this.v_boolean = null;
  }

  // v_boolean_box
  bool? get v_boolean_box => this._v_boolean_box;

  set v_boolean_box(bool? v_boolean_box) {
    this._v_boolean_box = v_boolean_box;
    //this.__isset_v_boolean_box = true;
  }

  bool isSetV_boolean_box() => this.v_boolean_box != null;

  unsetV_boolean_box() {
    this.v_boolean_box = null;
  }

  // v_byte
  int? get v_byte => this._v_byte;

  set v_byte(int? v_byte) {
    this._v_byte = v_byte;
    //this.__isset_v_byte = true;
  }

  bool isSetV_byte() => this.v_byte != null;

  unsetV_byte() {
    this.v_byte = null;
  }

  // v_byte_box
  int? get v_byte_box => this._v_byte_box;

  set v_byte_box(int? v_byte_box) {
    this._v_byte_box = v_byte_box;
    //this.__isset_v_byte_box = true;
  }

  bool isSetV_byte_box() => this.v_byte_box != null;

  unsetV_byte_box() {
    this.v_byte_box = null;
  }

  // v_short
  int? get v_short => this._v_short;

  set v_short(int? v_short) {
    this._v_short = v_short;
    //this.__isset_v_short = true;
  }

  bool isSetV_short() => this.v_short != null;

  unsetV_short() {
    this.v_short = null;
  }

  // v_short_box
  int? get v_short_box => this._v_short_box;

  set v_short_box(int? v_short_box) {
    this._v_short_box = v_short_box;
    //this.__isset_v_short_box = true;
  }

  bool isSetV_short_box() => this.v_short_box != null;

  unsetV_short_box() {
    this.v_short_box = null;
  }

  // v_int
  int? get v_int => this._v_int;

  set v_int(int? v_int) {
    this._v_int = v_int;
    //this.__isset_v_int = true;
  }

  bool isSetV_int() => this.v_int != null;

  unsetV_int() {
    this.v_int = null;
  }

  // v_int_box
  int? get v_int_box => this._v_int_box;

  set v_int_box(int? v_int_box) {
    this._v_int_box = v_int_box;
    //this.__isset_v_int_box = true;
  }

  bool isSetV_int_box() => this.v_int_box != null;

  unsetV_int_box() {
    this.v_int_box = null;
  }

  // v_long
  int? get v_long => this._v_long;

  set v_long(int? v_long) {
    this._v_long = v_long;
    //this.__isset_v_long = true;
  }

  bool isSetV_long() => this.v_long != null;

  unsetV_long() {
    this.v_long = null;
  }

  // v_long_box
  int? get v_long_box => this._v_long_box;

  set v_long_box(int? v_long_box) {
    this._v_long_box = v_long_box;
    //this.__isset_v_long_box = true;
  }

  bool isSetV_long_box() => this.v_long_box != null;

  unsetV_long_box() {
    this.v_long_box = null;
  }

  // v_float
  double? get v_float => this._v_float;

  set v_float(double? v_float) {
    this._v_float = v_float;
    //this.__isset_v_float = true;
  }

  bool isSetV_float() => this.v_float != null;

  unsetV_float() {
    this.v_float = null;
  }

  // v_float_box
  double? get v_float_box => this._v_float_box;

  set v_float_box(double? v_float_box) {
    this._v_float_box = v_float_box;
    //this.__isset_v_float_box = true;
  }

  bool isSetV_float_box() => this.v_float_box != null;

  unsetV_float_box() {
    this.v_float_box = null;
  }

  // v_double
  double? get v_double => this._v_double;

  set v_double(double? v_double) {
    this._v_double = v_double;
    //this.__isset_v_double = true;
  }

  bool isSetV_double() => this.v_double != null;

  unsetV_double() {
    this.v_double = null;
  }

  // v_double_box
  double? get v_double_box => this._v_double_box;

  set v_double_box(double? v_double_box) {
    this._v_double_box = v_double_box;
    //this.__isset_v_double_box = true;
  }

  bool isSetV_double_box() => this.v_double_box != null;

  unsetV_double_box() {
    this.v_double_box = null;
  }

  // v_string
  String? get v_string => this._v_string;

  set v_string(String? v_string) {
    this._v_string = v_string;
    //this.__isset_v_string = true;
  }

  bool isSetV_string() => this.v_string != null;

  unsetV_string() {
    this.v_string = null;
  }

  // v_object
  object? get v_object => this._v_object;

  set v_object(object? v_object) {
    this._v_object = v_object;
    //this.__isset_v_object = true;
  }

  bool isSetV_object() => this.v_object != null;

  unsetV_object() {
    this.v_object = null;
  }

  // v_array
  List<Variant>? get v_array => this._v_array;

  set v_array(List<Variant>? v_array) {
    this._v_array = v_array;
  }

  bool isSetV_array() => this.v_array != null;

  unsetV_array() {
    this.v_array = null;
  }

  // v_list
  List<Variant>? get v_list => this._v_list;

  set v_list(List<Variant>? v_list) {
    this._v_list = v_list;
  }

  bool isSetV_list() => this.v_list != null;

  unsetV_list() {
    this.v_list = null;
  }

  // v_set
  Set<Variant>? get v_set => this._v_set;

  set v_set(Set<Variant>? v_set) {
    this._v_set = v_set;
  }

  bool isSetV_set() => this.v_set != null;

  unsetV_set() {
    this.v_set = null;
  }

  // v_map
  Map<Variant, Variant>? get v_map => this._v_map;

  set v_map(Map<Variant, Variant>? v_map) {
    this._v_map = v_map;
  }

  bool isSetV_map() => this.v_map != null;

  unsetV_map() {
    this.v_map = null;
  }

  // v_big_decimal
  String? get v_big_decimal => this._v_big_decimal;

  set v_big_decimal(String? v_big_decimal) {
    this._v_big_decimal = v_big_decimal;
    //this.__isset_v_big_decimal = true;
  }

  bool isSetV_big_decimal() => this.v_big_decimal != null;

  unsetV_big_decimal() {
    this.v_big_decimal = null;
  }

  // v_amount
  Amount? get v_amount => this._v_amount;

  set v_amount(Amount? v_amount) {
    this._v_amount = v_amount;
    //this.__isset_v_amount = true;
  }

  bool isSetV_amount() => this.v_amount != null;

  unsetV_amount() {
    this.v_amount = null;
  }

  // v_byte_array
  Uint8List? get v_byte_array => this._v_byte_array;

  set v_byte_array(Uint8List? v_byte_array) {
    this._v_byte_array = v_byte_array;
    //this.__isset_v_byte_array = true;
  }

  bool isSetV_byte_array() => this.v_byte_array != null;

  unsetV_byte_array() {
    this.v_byte_array = null;
  }

  @override
  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case V_NULL:
          if (field.type == TType.STRING) {
            this.v_null = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_VOID:
          if (field.type == TType.BYTE) {
            this.v_void = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_BOOLEAN:
          if (field.type == TType.BOOL) {
            this.v_boolean = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_BOOLEAN_BOX:
          if (field.type == TType.BOOL) {
            this.v_boolean_box = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_BYTE:
          if (field.type == TType.BYTE) {
            this.v_byte = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_BYTE_BOX:
          if (field.type == TType.BYTE) {
            this.v_byte_box = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_SHORT:
          if (field.type == TType.I16) {
            this.v_short = iprot.readI16();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_SHORT_BOX:
          if (field.type == TType.I16) {
            this.v_short_box = iprot.readI16();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_INT:
          if (field.type == TType.I32) {
            this.v_int = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_INT_BOX:
          if (field.type == TType.I32) {
            this.v_int_box = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_LONG:
          if (field.type == TType.I64) {
            this.v_long = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_LONG_BOX:
          if (field.type == TType.I64) {
            this.v_long_box = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_FLOAT:
          if (field.type == TType.DOUBLE) {
            this.v_float = iprot.readDouble();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_FLOAT_BOX:
          if (field.type == TType.DOUBLE) {
            this.v_float_box = iprot.readDouble();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_DOUBLE:
          if (field.type == TType.DOUBLE) {
            this.v_double = iprot.readDouble();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_DOUBLE_BOX:
          if (field.type == TType.DOUBLE) {
            this.v_double_box = iprot.readDouble();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_STRING:
          if (field.type == TType.STRING) {
            this.v_string = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_OBJECT:
          if (field.type == TType.STRUCT) {
            this.v_object = object();
            this.v_object!.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_ARRAY:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.v_array = [];
              for (int _i5 = 0; _i5 < _list4.length; ++_i5) {
                Variant _elem6;//declare element for this.v_array
                _elem6 = Variant();
                _elem6.read(iprot);
                this.v_array?.add(_elem6);//add element to parent this.v_array
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.v_list = [];
              for (int _i8 = 0; _i8 < _list7.length; ++_i8) {
                Variant _elem9;//declare element for this.v_list
                _elem9 = Variant();
                _elem9.read(iprot);
                this.v_list?.add(_elem9);//add element to parent this.v_list
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_SET:
          if (field.type == TType.SET) {
            {
              TSet _set10 = iprot.readSetBegin();
              this.v_set = Set<Variant>();
              for (int _i11 = 0; _i11 < _set10.length; ++_i11) {
                Variant _elem12;
                _elem12 = Variant();
                _elem12.read(iprot);
                this.v_set?.add(_elem12);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map13 = iprot.readMapBegin();
              this.v_map = Map<Variant, Variant>();
              for (int _i14 = 0; _i14 < _map13.length; ++_i14) {
                Variant _key15;
                Variant _val16;
                _key15 = Variant();
                _key15.read(iprot);
                _val16 = Variant();
                _val16.read(iprot);
                this.v_map?[_key15] = _val16;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_BIG_DECIMAL:
          if (field.type == TType.STRING) {
            this.v_big_decimal = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_AMOUNT:
          if (field.type == TType.STRUCT) {
            this.v_amount = Amount();
            this.v_amount!.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V_BYTE_ARRAY:
          if (field.type == TType.STRING) {
            this.v_byte_array = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetV_null()) {
      oprot.writeFieldBegin(_V_NULL_FIELD_DESC);
      oprot.writeString(this.v_null!);
      oprot.writeFieldEnd();
    }
    if (isSetV_void()) {
      oprot.writeFieldBegin(_V_VOID_FIELD_DESC);
      oprot.writeByte(this.v_void!);
      oprot.writeFieldEnd();
    }
    if (isSetV_boolean()) {
      oprot.writeFieldBegin(_V_BOOLEAN_FIELD_DESC);
      oprot.writeBool(this.v_boolean!);
      oprot.writeFieldEnd();
    }
    if (isSetV_boolean_box()) {
      oprot.writeFieldBegin(_V_BOOLEAN_BOX_FIELD_DESC);
      oprot.writeBool(this.v_boolean_box!);
      oprot.writeFieldEnd();
    }
    if (isSetV_byte()) {
      oprot.writeFieldBegin(_V_BYTE_FIELD_DESC);
      oprot.writeByte(this.v_byte!);
      oprot.writeFieldEnd();
    }
    if (isSetV_byte_box()) {
      oprot.writeFieldBegin(_V_BYTE_BOX_FIELD_DESC);
      oprot.writeByte(this.v_byte_box!);
      oprot.writeFieldEnd();
    }
    if (isSetV_short()) {
      oprot.writeFieldBegin(_V_SHORT_FIELD_DESC);
      oprot.writeI16(this.v_short!);
      oprot.writeFieldEnd();
    }
    if (isSetV_short_box()) {
      oprot.writeFieldBegin(_V_SHORT_BOX_FIELD_DESC);
      oprot.writeI16(this.v_short_box!);
      oprot.writeFieldEnd();
    }
    if (isSetV_int()) {
      oprot.writeFieldBegin(_V_INT_FIELD_DESC);
      oprot.writeI32(this.v_int!);
      oprot.writeFieldEnd();
    }
    if (isSetV_int_box()) {
      oprot.writeFieldBegin(_V_INT_BOX_FIELD_DESC);
      oprot.writeI32(this.v_int_box!);
      oprot.writeFieldEnd();
    }
    if (isSetV_long()) {
      oprot.writeFieldBegin(_V_LONG_FIELD_DESC);
      oprot.writeI64(this.v_long!);
      oprot.writeFieldEnd();
    }
    if (isSetV_long_box()) {
      oprot.writeFieldBegin(_V_LONG_BOX_FIELD_DESC);
      oprot.writeI64(this.v_long_box!);
      oprot.writeFieldEnd();
    }
    if (isSetV_float()) {
      oprot.writeFieldBegin(_V_FLOAT_FIELD_DESC);
      oprot.writeDouble(this.v_float!);
      oprot.writeFieldEnd();
    }
    if (isSetV_float_box()) {
      oprot.writeFieldBegin(_V_FLOAT_BOX_FIELD_DESC);
      oprot.writeDouble(this.v_float_box!);
      oprot.writeFieldEnd();
    }
    if (isSetV_double()) {
      oprot.writeFieldBegin(_V_DOUBLE_FIELD_DESC);
      oprot.writeDouble(this.v_double!);
      oprot.writeFieldEnd();
    }
    if (isSetV_double_box()) {
      oprot.writeFieldBegin(_V_DOUBLE_BOX_FIELD_DESC);
      oprot.writeDouble(this.v_double_box!);
      oprot.writeFieldEnd();
    }
    if (isSetV_string()) {
      oprot.writeFieldBegin(_V_STRING_FIELD_DESC);
      oprot.writeString(this.v_string!);
      oprot.writeFieldEnd();
    }
    if (isSetV_object()) {
      oprot.writeFieldBegin(_V_OBJECT_FIELD_DESC);
      this.v_object?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetV_array()) {
      oprot.writeFieldBegin(_V_ARRAY_FIELD_DESC);
      {
        oprot.writeListBegin(TList(TType.STRUCT, this.v_array!.length));
        for (var elem17 in this.v_array!) {
          elem17.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetV_list()) {
      oprot.writeFieldBegin(_V_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(TList(TType.STRUCT, this.v_list!.length));
        for (var elem18 in this.v_list!) {
          elem18.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetV_set()) {
      oprot.writeFieldBegin(_V_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(TSet(TType.STRUCT, this.v_set!.length));
        for (var elem19 in this.v_set!) {
          elem19.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetV_map()) {
      oprot.writeFieldBegin(_V_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(TMap(TType.STRUCT, TType.STRUCT, this.v_map!.length));
        for (var elem21 in this.v_map!.keys) {
          elem21.write(oprot);
          this.v_map![elem21]!.write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetV_big_decimal()) {
      oprot.writeFieldBegin(_V_BIG_DECIMAL_FIELD_DESC);
      oprot.writeString(this.v_big_decimal!);
      oprot.writeFieldEnd();
    }
    if (isSetV_amount()) {
      oprot.writeFieldBegin(_V_AMOUNT_FIELD_DESC);
      this.v_amount?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetV_byte_array()) {
      oprot.writeFieldBegin(_V_BYTE_ARRAY_FIELD_DESC);
      oprot.writeBinary(this.v_byte_array!);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("Variant(");

    if (isSetV_null()) {
      ret.write("v_null:");
      if (this.v_null == null) {
        ret.write("null");
      } else {
        ret.write(this.v_null);
      }
    }

    if (isSetV_void()) {
      ret.write(", ");
      ret.write("v_void:");
      if (this.v_void == null) {
        ret.write("null");
      } else {
        ret.write(this.v_void);
      }
    }

    if (isSetV_boolean()) {
      ret.write(", ");
      ret.write("v_boolean:");
      if (this.v_boolean == null) {
        ret.write("null");
      } else {
        ret.write(this.v_boolean);
      }
    }

    if (isSetV_boolean_box()) {
      ret.write(", ");
      ret.write("v_boolean_box:");
      if (this.v_boolean_box == null) {
        ret.write("null");
      } else {
        ret.write(this.v_boolean_box);
      }
    }

    if (isSetV_byte()) {
      ret.write(", ");
      ret.write("v_byte:");
      if (this.v_byte == null) {
        ret.write("null");
      } else {
        ret.write(this.v_byte);
      }
    }

    if (isSetV_byte_box()) {
      ret.write(", ");
      ret.write("v_byte_box:");
      if (this.v_byte_box == null) {
        ret.write("null");
      } else {
        ret.write(this.v_byte_box);
      }
    }

    if (isSetV_short()) {
      ret.write(", ");
      ret.write("v_short:");
      if (this.v_short == null) {
        ret.write("null");
      } else {
        ret.write(this.v_short);
      }
    }

    if (isSetV_short_box()) {
      ret.write(", ");
      ret.write("v_short_box:");
      if (this.v_short_box == null) {
        ret.write("null");
      } else {
        ret.write(this.v_short_box);
      }
    }

    if (isSetV_int()) {
      ret.write(", ");
      ret.write("v_int:");
      if (this.v_int == null) {
        ret.write("null");
      } else {
        ret.write(this.v_int);
      }
    }

    if (isSetV_int_box()) {
      ret.write(", ");
      ret.write("v_int_box:");
      if (this.v_int_box == null) {
        ret.write("null");
      } else {
        ret.write(this.v_int_box);
      }
    }

    if (isSetV_long()) {
      ret.write(", ");
      ret.write("v_long:");
      if (this.v_long == null) {
        ret.write("null");
      } else {
        ret.write(this.v_long);
      }
    }

    if (isSetV_long_box()) {
      ret.write(", ");
      ret.write("v_long_box:");
      if (this.v_long_box == null) {
        ret.write("null");
      } else {
        ret.write(this.v_long_box);
      }
    }

    if (isSetV_float()) {
      ret.write(", ");
      ret.write("v_float:");
      if (this.v_float == null) {
        ret.write("null");
      } else {
        ret.write(this.v_float);
      }
    }

    if (isSetV_float_box()) {
      ret.write(", ");
      ret.write("v_float_box:");
      if (this.v_float_box == null) {
        ret.write("null");
      } else {
        ret.write(this.v_float_box);
      }
    }

    if (isSetV_double()) {
      ret.write(", ");
      ret.write("v_double:");
      if (this.v_double == null) {
        ret.write("null");
      } else {
        ret.write(this.v_double);
      }
    }

    if (isSetV_double_box()) {
      ret.write(", ");
      ret.write("v_double_box:");
      if (this.v_double_box == null) {
        ret.write("null");
      } else {
        ret.write(this.v_double_box);
      }
    }

    if (isSetV_string()) {
      ret.write(", ");
      ret.write("v_string:");
      if (this.v_string == null) {
        ret.write("null");
      } else {
        ret.write(this.v_string);
      }
    }

    if (isSetV_object()) {
      ret.write(", ");
      ret.write("v_object:");
      if (this.v_object == null) {
        ret.write("null");
      } else {
        ret.write(this.v_object);
      }
    }

    if (isSetV_array()) {
      ret.write(", ");
      ret.write("v_array:");
      if (this.v_array == null) {
        ret.write("null");
      } else {
        ret.write(this.v_array);
      }
    }

    if (isSetV_list()) {
      ret.write(", ");
      ret.write("v_list:");
      if (this.v_list == null) {
        ret.write("null");
      } else {
        ret.write(this.v_list);
      }
    }

    if (isSetV_set()) {
      ret.write(", ");
      ret.write("v_set:");
      if (this.v_set == null) {
        ret.write("null");
      } else {
        ret.write(this.v_set);
      }
    }

    if (isSetV_map()) {
      ret.write(", ");
      ret.write("v_map:");
      if (this.v_map == null) {
        ret.write("null");
      } else {
        ret.write(this.v_map);
      }
    }

    if (isSetV_big_decimal()) {
      ret.write(", ");
      ret.write("v_big_decimal:");
      if (this.v_big_decimal == null) {
        ret.write("null");
      } else {
        ret.write(this.v_big_decimal);
      }
    }

    if (isSetV_amount()) {
      ret.write(", ");
      ret.write("v_amount:");
      if (this.v_amount == null) {
        ret.write("null");
      } else {
        ret.write(this.v_amount);
      }
    }

    if (isSetV_byte_array()) {
      ret.write(", ");
      ret.write("v_byte_array:");
      if (this.v_byte_array == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

