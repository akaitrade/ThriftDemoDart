/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library general.src.method_description;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'class_object.dart';
import 'object.dart';
import 'amount.dart';
import 'variant.dart';
import 'annotation.dart';
import 'method_argument.dart';
import 'method_description.dart';
import 'byte_code_object.dart';
import 'method_signature.dart';
import 'method_short_argument.dart';
import 'method_short_description.dart';
import 'api_response.dart';

class MethodDescription implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("MethodDescription");
  static final TField _RETURN_TYPE_FIELD_DESC = TField("returnType", TType.STRING, 1);
  static final TField _NAME_FIELD_DESC = TField("name", TType.STRING, 2);
  static final TField _ARGUMENTS_FIELD_DESC = TField("arguments", TType.LIST, 3);
  static final TField _ANNOTATIONS_FIELD_DESC = TField("annotations", TType.LIST, 4);
  static final TField _MODIFIERS_FIELD_DESC = TField("modifiers", TType.LIST, 5);
  static final TField _ADDRESS_FIELD_DESC = TField("address", TType.STRING, 6);

  String _returnType = "";
  static const int RETURNTYPE = 1;
  String _name = "";
  static const int NAME = 2;
  List<MethodArgument> _arguments = [];
  static const int ARGUMENTS = 3;
  List<Annotation> _annotations = [];
  static const int ANNOTATIONS = 4;
  List<String>? _modifiers;
  static const int MODIFIERS = 5;
  String? _address;
  static const int ADDRESS = 6;

  //bool __isset_modifiers = false;
  //bool __isset_address = false;

  MethodDescription() {
  }

  // returnType
  String get returnType => this._returnType;

  set returnType(String returnType) {
    this._returnType = returnType;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  // arguments
  List<MethodArgument> get arguments => this._arguments;

  set arguments(List<MethodArgument> arguments) {
    this._arguments = arguments;
  }

  // annotations
  List<Annotation> get annotations => this._annotations;

  set annotations(List<Annotation> annotations) {
    this._annotations = annotations;
  }

  // modifiers
  List<String>? get modifiers => this._modifiers;

  set modifiers(List<String>? modifiers) {
    this._modifiers = modifiers;
  }

  bool isSetModifiers() => this.modifiers != null;

  unsetModifiers() {
    this.modifiers = null;
  }

  // address
  String? get address => this._address;

  set address(String? address) {
    this._address = address;
    //this.__isset_address = true;
  }

  bool isSetAddress() => this.address != null;

  unsetAddress() {
    this.address = null;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_returnType = false;
    bool __isset_name = false;
    bool __isset_arguments = false;
    bool __isset_annotations = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case RETURNTYPE:
          if (field.type == TType.STRING) {
            this.returnType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ARGUMENTS:
          if (field.type == TType.LIST) {
            {
              TList _list32 = iprot.readListBegin();
              this.arguments = [];
              for (int _i33 = 0; _i33 < _list32.length; ++_i33) {
                MethodArgument _elem34;//declare element for this.arguments
                _elem34 = MethodArgument();
                _elem34.read(iprot);
                this.arguments.add(_elem34);//add element to parent this.arguments
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ANNOTATIONS:
          if (field.type == TType.LIST) {
            {
              TList _list35 = iprot.readListBegin();
              this.annotations = [];
              for (int _i36 = 0; _i36 < _list35.length; ++_i36) {
                Annotation _elem37;//declare element for this.annotations
                _elem37 = Annotation();
                _elem37.read(iprot);
                this.annotations.add(_elem37);//add element to parent this.annotations
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MODIFIERS:
          if (field.type == TType.LIST) {
            {
              TList _list38 = iprot.readListBegin();
              this.modifiers = [];
              for (int _i39 = 0; _i39 < _list38.length; ++_i39) {
                String _elem40;//declare element for this.modifiers
                _elem40 = iprot.readString();
                this.modifiers?.add(_elem40);//add element to parent this.modifiers
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ADDRESS:
          if (field.type == TType.STRING) {
            this.address = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_RETURN_TYPE_FIELD_DESC);
    oprot.writeString(this.returnType);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NAME_FIELD_DESC);
    oprot.writeString(this.name);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ARGUMENTS_FIELD_DESC);
    {
      oprot.writeListBegin(TList(TType.STRUCT, this.arguments.length));
      for (var elem41 in this.arguments) {
        elem41.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ANNOTATIONS_FIELD_DESC);
    {
      oprot.writeListBegin(TList(TType.STRUCT, this.annotations.length));
      for (var elem42 in this.annotations) {
        elem42.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
    if (isSetModifiers()) {
      oprot.writeFieldBegin(_MODIFIERS_FIELD_DESC);
      {
        oprot.writeListBegin(TList(TType.STRING, this.modifiers!.length));
        for (var elem43 in this.modifiers!) {
          oprot.writeString(elem43);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetAddress()) {
      oprot.writeFieldBegin(_ADDRESS_FIELD_DESC);
      oprot.writeString(this.address!);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("MethodDescription(");

    ret.write("returnType:");
    ret.write(this.returnType);

    ret.write(", ");
    ret.write("name:");
    ret.write(this.name);

    ret.write(", ");
    ret.write("arguments:");
    ret.write(this.arguments);

    ret.write(", ");
    ret.write("annotations:");
    ret.write(this.annotations);

    if (isSetModifiers()) {
      ret.write(", ");
      ret.write("modifiers:");
      if (this.modifiers == null) {
        ret.write("null");
      } else {
        ret.write(this.modifiers);
      }
    }

    if (isSetAddress()) {
      ret.write(", ");
      ret.write("address:");
      if (this.address == null) {
        ret.write("null");
      } else {
        ret.write(this.address);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

