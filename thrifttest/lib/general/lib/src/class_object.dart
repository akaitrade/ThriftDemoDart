/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library general.src.class_object;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'class_object.dart';
import 'object.dart';
import 'amount.dart';
import 'variant.dart';
import 'annotation.dart';
import 'method_argument.dart';
import 'method_description.dart';
import 'byte_code_object.dart';
import 'method_signature.dart';
import 'method_short_argument.dart';
import 'method_short_description.dart';
import 'api_response.dart';

class ClassObject implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("ClassObject");
  static final TField _BYTE_CODE_OBJECTS_FIELD_DESC = TField("byteCodeObjects", TType.LIST, 1);
  static final TField _INSTANCE_FIELD_DESC = TField("instance", TType.STRING, 2);

  List<ByteCodeObject> _byteCodeObjects = [];
  static const int BYTECODEOBJECTS = 1;
  Uint8List _instance = Uint8List(0);
  static const int INSTANCE = 2;


  ClassObject() {
  }

  // byteCodeObjects
  List<ByteCodeObject> get byteCodeObjects => this._byteCodeObjects;

  set byteCodeObjects(List<ByteCodeObject> byteCodeObjects) {
    this._byteCodeObjects = byteCodeObjects;
  }

  // instance
  Uint8List get instance => this._instance;

  set instance(Uint8List instance) {
    this._instance = instance;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_byteCodeObjects = false;
    bool __isset_instance = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BYTECODEOBJECTS:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.byteCodeObjects = [];
              for (int _i1 = 0; _i1 < _list0.length; ++_i1) {
                ByteCodeObject _elem2;//declare element for this.byteCodeObjects
                _elem2 = ByteCodeObject();
                _elem2.read(iprot);
                this.byteCodeObjects.add(_elem2);//add element to parent this.byteCodeObjects
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INSTANCE:
          if (field.type == TType.STRING) {
            this.instance = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_BYTE_CODE_OBJECTS_FIELD_DESC);
    {
      oprot.writeListBegin(TList(TType.STRUCT, this.byteCodeObjects.length));
      for (var elem3 in this.byteCodeObjects) {
        elem3.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INSTANCE_FIELD_DESC);
    oprot.writeBinary(this.instance);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("ClassObject(");

    ret.write("byteCodeObjects:");
    ret.write(this.byteCodeObjects);

    ret.write(", ");
    ret.write("instance:");
    ret.write("BINARY");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

