/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.delegated;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:thrifttest/general/lib/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class Delegated implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("Delegated");
  static final TField _INCOMING_FIELD_DESC = TField("incoming", TType.STRUCT, 1);
  static final TField _OUTGOING_FIELD_DESC = TField("outgoing", TType.STRUCT, 2);
  static final TField _DONORS_FIELD_DESC = TField("donors", TType.LIST, 3);
  static final TField _RECIPIENTS_FIELD_DESC = TField("recipients", TType.LIST, 4);

  t_general.Amount _incoming = t_general.Amount();
  static const int INCOMING = 1;
  t_general.Amount _outgoing = t_general.Amount();
  static const int OUTGOING = 2;
  List<DelegatedItem>? _donors;
  static const int DONORS = 3;
  List<DelegatedItem>? _recipients;
  static const int RECIPIENTS = 4;

  //bool __isset_donors = false;
  //bool __isset_recipients = false;

  Delegated() {
  }

  // incoming
  t_general.Amount get incoming => this._incoming;

  set incoming(t_general.Amount incoming) {
    this._incoming = incoming;
  }

  // outgoing
  t_general.Amount get outgoing => this._outgoing;

  set outgoing(t_general.Amount outgoing) {
    this._outgoing = outgoing;
  }

  // donors
  List<DelegatedItem>? get donors => this._donors;

  set donors(List<DelegatedItem>? donors) {
    this._donors = donors;
  }

  bool isSetDonors() => this.donors != null;

  unsetDonors() {
    this.donors = null;
  }

  // recipients
  List<DelegatedItem>? get recipients => this._recipients;

  set recipients(List<DelegatedItem>? recipients) {
    this._recipients = recipients;
  }

  bool isSetRecipients() => this.recipients != null;

  unsetRecipients() {
    this.recipients = null;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_incoming = false;
    bool __isset_outgoing = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case INCOMING:
          if (field.type == TType.STRUCT) {
            this.incoming = t_general.Amount();
            this.incoming.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OUTGOING:
          if (field.type == TType.STRUCT) {
            this.outgoing = t_general.Amount();
            this.outgoing.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DONORS:
          if (field.type == TType.LIST) {
            {
              TList _list32 = iprot.readListBegin();
              this.donors = [];
              for (int _i33 = 0; _i33 < _list32.length; ++_i33) {
                DelegatedItem _elem34;//declare element for this.donors
                _elem34 = DelegatedItem();
                _elem34.read(iprot);
                this.donors?.add(_elem34);//add element to parent this.donors
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECIPIENTS:
          if (field.type == TType.LIST) {
            {
              TList _list35 = iprot.readListBegin();
              this.recipients = [];
              for (int _i36 = 0; _i36 < _list35.length; ++_i36) {
                DelegatedItem _elem37;//declare element for this.recipients
                _elem37 = DelegatedItem();
                _elem37.read(iprot);
                this.recipients?.add(_elem37);//add element to parent this.recipients
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_INCOMING_FIELD_DESC);
    this.incoming.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_OUTGOING_FIELD_DESC);
    this.outgoing.write(oprot);
    oprot.writeFieldEnd();
    if (isSetDonors()) {
      oprot.writeFieldBegin(_DONORS_FIELD_DESC);
      {
        oprot.writeListBegin(TList(TType.STRUCT, this.donors!.length));
        for (var elem38 in this.donors!) {
          elem38.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetRecipients()) {
      oprot.writeFieldBegin(_RECIPIENTS_FIELD_DESC);
      {
        oprot.writeListBegin(TList(TType.STRUCT, this.recipients!.length));
        for (var elem39 in this.recipients!) {
          elem39.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("Delegated(");

    ret.write("incoming:");
    ret.write(this.incoming);

    ret.write(", ");
    ret.write("outgoing:");
    ret.write(this.outgoing);

    if (isSetDonors()) {
      ret.write(", ");
      ret.write("donors:");
      if (this.donors == null) {
        ret.write("null");
      } else {
        ret.write(this.donors);
      }
    }

    if (isSetRecipients()) {
      ret.write(", ");
      ret.write("recipients:");
      if (this.recipients == null) {
        ret.write("null");
      } else {
        ret.write(this.recipients);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

