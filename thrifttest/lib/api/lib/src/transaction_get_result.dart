/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.transaction_get_result;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:thrifttest/general/lib/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class TransactionGetResult implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("TransactionGetResult");
  static final TField _STATUS_FIELD_DESC = TField("status", TType.STRUCT, 1);
  static final TField _FOUND_FIELD_DESC = TField("found", TType.BOOL, 2);
  static final TField _STATE_FIELD_DESC = TField("state", TType.I32, 3);
  static final TField _ROUND_NUM_FIELD_DESC = TField("roundNum", TType.I32, 4);
  static final TField _TRANSACTION_FIELD_DESC = TField("transaction", TType.STRUCT, 5);

  t_general.APIResponse _status = t_general.APIResponse();
  static const int STATUS = 1;
  bool _found = false;
  static const int FOUND = 2;
  int _state = 0;
  static const int STATE = 3;
  int _roundNum = 0;
  static const int ROUNDNUM = 4;
  SealedTransaction _transaction = SealedTransaction();
  static const int TRANSACTION = 5;


  TransactionGetResult() {
  }
  bool __isset_status = false;
  bool __isset_found = false;
  bool __isset_state = false;
  bool __isset_roundNum = false;
  bool __isset_transaction = false;
  bool isSetState() => this.__isset_state;

  unsetState() {
    this.__isset_state = false;
  }

  // status
  t_general.APIResponse get status => this._status;

  set status(t_general.APIResponse status) {
    this._status = status;
  }

  // found
  bool get found => this._found;

  set found(bool found) {
    this._found = found;
  }

  // state
  int get state => this._state;

  set state(int state) {
    this._state = state;
  }

  // roundNum
  int get roundNum => this._roundNum;

  set roundNum(int roundNum) {
    this._roundNum = roundNum;
  }

  // transaction
  SealedTransaction get transaction => this._transaction;

  set transaction(SealedTransaction transaction) {
    this._transaction = transaction;
  }

  @override
  read(TProtocol iprot) {
    
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case STATUS:
          if (field.type == TType.STRUCT) {
            this.status = t_general.APIResponse();
            this.status.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FOUND:
          if (field.type == TType.BOOL) {
            this.found = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATE:
          if (field.type == TType.I32) {
            this.state = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROUNDNUM:
          if (field.type == TType.I32) {
            this.roundNum = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRANSACTION:
          if (field.type == TType.STRUCT) {
            this.transaction = SealedTransaction();
            this.transaction.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_STATUS_FIELD_DESC);
    this.status.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_FOUND_FIELD_DESC);
    oprot.writeBool(this.found);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_STATE_FIELD_DESC);
    oprot.writeI32(this.state);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ROUND_NUM_FIELD_DESC);
    oprot.writeI32(this.roundNum);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TRANSACTION_FIELD_DESC);
    this.transaction.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("TransactionGetResult(");

    ret.write("status:");
    ret.write(this.status);

    ret.write(", ");
    ret.write("found:");
    ret.write(this.found);

    ret.write(", ");
    ret.write("state:");
    String state_name = TransactionState.VALUES_TO_NAMES[this.state]!;
    if (state_name != null) {
      ret.write(state_name);
      ret.write(" (");
    }
    ret.write(this.state);
    if (state_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("roundNum:");
    ret.write(this.roundNum);

    ret.write(", ");
    ret.write("transaction:");
    ret.write(this.transaction);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetState() && !TransactionState.VALID_VALUES.contains(state)) {
      throw TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'state' has been assigned the invalid value $state");
    }
  }

}

