/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.short_transaction;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:thrifttest/general/lib/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class ShortTransaction implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("ShortTransaction");
  static final TField _ID_FIELD_DESC = TField("id", TType.STRUCT, 1);
  static final TField _SOURCE_FIELD_DESC = TField("source", TType.STRING, 2);
  static final TField _TARGET_FIELD_DESC = TField("target", TType.STRING, 3);
  static final TField _AMOUNT_FIELD_DESC = TField("amount", TType.STRUCT, 4);
  static final TField _FEE_FIELD_DESC = TField("fee", TType.STRUCT, 5);
  static final TField _TIME_CREATION_FIELD_DESC = TField("timeCreation", TType.I64, 6);
  static final TField _CURRENCY_FIELD_DESC = TField("currency", TType.BYTE, 7);
  static final TField _TYPE_FIELD_DESC = TField("type", TType.I32, 8);
  static final TField _USER_FIELDS_FIELD_DESC = TField("userFields", TType.STRING, 10);

  TransactionId _id = TransactionId();
  static const int ID = 1;
  Uint8List _source = Uint8List(0);
  static const int SOURCE = 2;
  Uint8List _target = Uint8List(0);
  static const int TARGET = 3;
  t_general.Amount _amount = t_general.Amount();
  static const int AMOUNT = 4;
  AmountCommission _fee = AmountCommission();
  static const int FEE = 5;
  int _timeCreation = 0;
  static const int TIMECREATION = 6;
  int _currency = 0;
  static const int CURRENCY = 7;
  int _type = 0;
  static const int TYPE = 8;
  Uint8List? _userFields;
  static const int USERFIELDS = 10;

  //bool __isset_userFields = false;
  bool __isset_id = false;
  bool __isset_source = false;
  bool __isset_target = false;
  bool __isset_amount = false;
  bool __isset_fee = false;
  bool __isset_timeCreation = false;
  bool __isset_currency = false;
  bool __isset_type = false;
  ShortTransaction() {
  }
  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }
  // id
  TransactionId get id => this._id;

  set id(TransactionId id) {
    this._id = id;
  }

  // source
  Uint8List get source => this._source;

  set source(Uint8List source) {
    this._source = source;
  }

  // target
  Uint8List get target => this._target;

  set target(Uint8List target) {
    this._target = target;
  }

  // amount
  t_general.Amount get amount => this._amount;

  set amount(t_general.Amount amount) {
    this._amount = amount;
  }

  // fee
  AmountCommission get fee => this._fee;

  set fee(AmountCommission fee) {
    this._fee = fee;
  }

  // timeCreation
  int get timeCreation => this._timeCreation;

  set timeCreation(int timeCreation) {
    this._timeCreation = timeCreation;
  }

  // currency
  int get currency => this._currency;

  set currency(int currency) {
    this._currency = currency;
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
  }

  // userFields
  Uint8List? get userFields => this._userFields;

  set userFields(Uint8List? userFields) {
    this._userFields = userFields;
    //this.__isset_userFields = true;
  }

  bool isSetUserFields() => this.userFields != null;

  unsetUserFields() {
    this.userFields = null;
  }

  @override
  read(TProtocol iprot) {
    
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRUCT) {
            this.id = TransactionId();
            this.id.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SOURCE:
          if (field.type == TType.STRING) {
            this.source = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGET:
          if (field.type == TType.STRING) {
            this.target = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AMOUNT:
          if (field.type == TType.STRUCT) {
            this.amount = t_general.Amount();
            this.amount.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FEE:
          if (field.type == TType.STRUCT) {
            this.fee = AmountCommission();
            this.fee.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TIMECREATION:
          if (field.type == TType.I64) {
            this.timeCreation = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCY:
          if (field.type == TType.BYTE) {
            this.currency = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERFIELDS:
          if (field.type == TType.STRING) {
            this.userFields = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ID_FIELD_DESC);
    this.id.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SOURCE_FIELD_DESC);
    oprot.writeBinary(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TARGET_FIELD_DESC);
    oprot.writeBinary(this.target);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_AMOUNT_FIELD_DESC);
    this.amount.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_FEE_FIELD_DESC);
    this.fee.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TIME_CREATION_FIELD_DESC);
    oprot.writeI64(this.timeCreation);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CURRENCY_FIELD_DESC);
    oprot.writeByte(this.currency);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (isSetUserFields()) {
      oprot.writeFieldBegin(_USER_FIELDS_FIELD_DESC);
      oprot.writeBinary(this.userFields!);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("ShortTransaction(");

    ret.write("id:");
    ret.write(this.id);

    ret.write(", ");
    ret.write("source:");
    ret.write(this.source);

    ret.write(", ");
    ret.write("target:");
    ret.write(this.target);

    ret.write(", ");
    ret.write("amount:");
    ret.write(this.amount);

    ret.write(", ");
    ret.write("fee:");
    ret.write(this.fee);

    ret.write(", ");
    ret.write("timeCreation:");
    ret.write(this.timeCreation);

    ret.write(", ");
    ret.write("currency:");
    ret.write(this.currency);

    ret.write(", ");
    ret.write("type:");
    String type_name = TransactionType.VALUES_TO_NAMES[this.type]!;
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    if (isSetUserFields()) {
      ret.write(", ");
      ret.write("userFields:");
      if (this.userFields == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !TransactionType.VALID_VALUES.contains(type)) {
      throw TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
  }

}

