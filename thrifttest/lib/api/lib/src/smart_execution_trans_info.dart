/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.smart_execution_trans_info;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:thrifttest/general/lib/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class SmartExecutionTransInfo implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("SmartExecutionTransInfo");
  static final TField _METHOD_FIELD_DESC = TField("method", TType.STRING, 1);
  static final TField _PARAMS_FIELD_DESC = TField("params", TType.LIST, 2);
  static final TField _STATE_FIELD_DESC = TField("state", TType.I32, 3);
  static final TField _STATE_TRANSACTION_FIELD_DESC = TField("stateTransaction", TType.STRUCT, 4);

  String _method = "";
  static const int METHOD = 1;
  List<t_general.Variant> _params = [];
  static const int PARAMS = 2;
  int _state = 0;
  static const int STATE = 3;
  TransactionId? _stateTransaction;
  static const int STATETRANSACTION = 4;
  bool __isset_method = false;
  bool __isset_params = false;
  bool __isset_state = false;
  //bool __isset_stateTransaction = false;

  SmartExecutionTransInfo() {
  }
  bool isSetState() => this.__isset_state;

  unsetState() {
    this.__isset_state = false;
  }
  // method
  String get method => this._method;

  set method(String method) {
    this._method = method;
  }

  // params
  List<t_general.Variant> get params => this._params;

  set params(List<t_general.Variant> params) {
    this._params = params;
  }

  // state
  int get state => this._state;

  set state(int state) {
    this._state = state;
  }

  // stateTransaction
  TransactionId? get stateTransaction => this._stateTransaction;

  set stateTransaction(TransactionId? stateTransaction) {
    this._stateTransaction = stateTransaction;
    //this.__isset_stateTransaction = true;
  }

  bool isSetStateTransaction() => this.stateTransaction != null;

  unsetStateTransaction() {
    this.stateTransaction = null;
  }

  @override
  read(TProtocol iprot) {
    
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case METHOD:
          if (field.type == TType.STRING) {
            this.method = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARAMS:
          if (field.type == TType.LIST) {
            {
              TList _list16 = iprot.readListBegin();
              this.params = [];
              for (int _i17 = 0; _i17 < _list16.length; ++_i17) {
                t_general.Variant _elem18;//declare element for this.params
                _elem18 = t_general.Variant();
                _elem18.read(iprot);
                this.params.add(_elem18);//add element to parent this.params
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATE:
          if (field.type == TType.I32) {
            this.state = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATETRANSACTION:
          if (field.type == TType.STRUCT) {
            this.stateTransaction = TransactionId();
            this.stateTransaction!.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_METHOD_FIELD_DESC);
    oprot.writeString(this.method);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PARAMS_FIELD_DESC);
    {
      oprot.writeListBegin(TList(TType.STRUCT, this.params.length));
      for (var elem19 in this.params) {
        elem19.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_STATE_FIELD_DESC);
    oprot.writeI32(this.state);
    oprot.writeFieldEnd();
    if (isSetStateTransaction()) {
      oprot.writeFieldBegin(_STATE_TRANSACTION_FIELD_DESC);
      this.stateTransaction?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("SmartExecutionTransInfo(");

    ret.write("method:");
    ret.write(this.method);

    ret.write(", ");
    ret.write("params:");
    ret.write(this.params);

    ret.write(", ");
    ret.write("state:");
    String state_name = SmartOperationState.VALUES_TO_NAMES[this.state]!;
    if (state_name != null) {
      ret.write(state_name);
      ret.write(" (");
    }
    ret.write(this.state);
    if (state_name != null) {
      ret.write(")");
    }

    if (isSetStateTransaction()) {
      ret.write(", ");
      ret.write("stateTransaction:");
      if (this.stateTransaction == null) {
        ret.write("null");
      } else {
        ret.write(this.stateTransaction);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetState() && !SmartOperationState.VALID_VALUES.contains(state)) {
      throw TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'state' has been assigned the invalid value $state");
    }
  }

}

