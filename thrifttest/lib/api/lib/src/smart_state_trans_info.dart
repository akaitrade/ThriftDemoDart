/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.smart_state_trans_info;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:thrifttest/general/lib/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class SmartStateTransInfo implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("SmartStateTransInfo");
  static final TField _SUCCESS_FIELD_DESC = TField("success", TType.BOOL, 1);
  static final TField _EXECUTION_FEE_FIELD_DESC = TField("executionFee", TType.STRUCT, 2);
  static final TField _RETURN_VALUE_FIELD_DESC = TField("returnValue", TType.STRUCT, 3);
  static final TField _START_TRANSACTION_FIELD_DESC = TField("startTransaction", TType.STRUCT, 4);

  bool _success = false;
  static const int SUCCESS = 1;
  t_general.Amount _executionFee = t_general.Amount();
  static const int EXECUTIONFEE = 2;
  t_general.Variant? _returnValue;
  static const int RETURNVALUE = 3;
  TransactionId _startTransaction = TransactionId();
  static const int STARTTRANSACTION = 4;

  //bool __isset_returnValue = false;

  SmartStateTransInfo() {
  }

  // success
  bool get success => this._success;

  set success(bool success) {
    this._success = success;
  }

  // executionFee
  t_general.Amount get executionFee => this._executionFee;

  set executionFee(t_general.Amount executionFee) {
    this._executionFee = executionFee;
  }

  // returnValue
  t_general.Variant? get returnValue => this._returnValue;

  set returnValue(t_general.Variant? returnValue) {
    this._returnValue = returnValue;
    //this.__isset_returnValue = true;
  }

  bool isSetReturnValue() => this.returnValue != null;

  unsetReturnValue() {
    this.returnValue = null;
  }

  // startTransaction
  TransactionId get startTransaction => this._startTransaction;

  set startTransaction(TransactionId startTransaction) {
    this._startTransaction = startTransaction;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_success = false;
    bool __isset_executionFee = false;
    bool __isset_startTransaction = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.BOOL) {
            this.success = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXECUTIONFEE:
          if (field.type == TType.STRUCT) {
            this.executionFee = t_general.Amount();
            this.executionFee.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RETURNVALUE:
          if (field.type == TType.STRUCT) {
            this.returnValue = t_general.Variant();
            this.returnValue!.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STARTTRANSACTION:
          if (field.type == TType.STRUCT) {
            this.startTransaction = TransactionId();
            this.startTransaction.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
    oprot.writeBool(this.success);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_EXECUTION_FEE_FIELD_DESC);
    this.executionFee.write(oprot);
    oprot.writeFieldEnd();
    if (isSetReturnValue()) {
      oprot.writeFieldBegin(_RETURN_VALUE_FIELD_DESC);
      this.returnValue?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_START_TRANSACTION_FIELD_DESC);
    this.startTransaction.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("SmartStateTransInfo(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("executionFee:");
    ret.write(this.executionFee);

    if (isSetReturnValue()) {
      ret.write(", ");
      ret.write("returnValue:");
      if (this.returnValue == null) {
        ret.write("null");
      } else {
        ret.write(this.returnValue);
      }
    }

    ret.write(", ");
    ret.write("startTransaction:");
    ret.write(this.startTransaction);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

