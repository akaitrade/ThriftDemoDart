/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.smart_contract;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:thrifttest/general/lib/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class SmartContract implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("SmartContract");
  static final TField _ADDRESS_FIELD_DESC = TField("address", TType.STRING, 1);
  static final TField _DEPLOYER_FIELD_DESC = TField("deployer", TType.STRING, 2);
  static final TField _SMART_CONTRACT_DEPLOY_FIELD_DESC = TField("smartContractDeploy", TType.STRUCT, 3);
  static final TField _OBJECT_STATE_FIELD_DESC = TField("objectState", TType.STRING, 4);
  static final TField _CREATE_TIME_FIELD_DESC = TField("createTime", TType.I64, 5);
  static final TField _TRANSACTIONS_COUNT_FIELD_DESC = TField("transactionsCount", TType.I32, 6);

  Uint8List _address = Uint8List(0);
  static const int ADDRESS = 1;
  Uint8List _deployer = Uint8List(0);
  static const int DEPLOYER = 2;
  SmartContractDeploy _smartContractDeploy = SmartContractDeploy();
  static const int SMARTCONTRACTDEPLOY = 3;
  Uint8List _objectState = Uint8List(0);
  static const int OBJECTSTATE = 4;
  int _createTime = 0;
  static const int CREATETIME = 5;
  int _transactionsCount = 0;
  static const int TRANSACTIONSCOUNT = 6;


  SmartContract() {
  }

  // address
  Uint8List get address => this._address;

  set address(Uint8List address) {
    this._address = address;
  }

  // deployer
  Uint8List get deployer => this._deployer;

  set deployer(Uint8List deployer) {
    this._deployer = deployer;
  }

  // smartContractDeploy
  SmartContractDeploy get smartContractDeploy => this._smartContractDeploy;

  set smartContractDeploy(SmartContractDeploy smartContractDeploy) {
    this._smartContractDeploy = smartContractDeploy;
  }

  // objectState
  Uint8List get objectState => this._objectState;

  set objectState(Uint8List objectState) {
    this._objectState = objectState;
  }

  // createTime
  int get createTime => this._createTime;

  set createTime(int createTime) {
    this._createTime = createTime;
  }

  // transactionsCount
  int get transactionsCount => this._transactionsCount;

  set transactionsCount(int transactionsCount) {
    this._transactionsCount = transactionsCount;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_address = false;
    bool __isset_deployer = false;
    bool __isset_smartContractDeploy = false;
    bool __isset_objectState = false;
    bool __isset_createTime = false;
    bool __isset_transactionsCount = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ADDRESS:
          if (field.type == TType.STRING) {
            this.address = iprot.readBinary();
            __isset_address = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEPLOYER:
          if (field.type == TType.STRING) {
            this.deployer = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SMARTCONTRACTDEPLOY:
          if (field.type == TType.STRUCT) {
            this.smartContractDeploy = SmartContractDeploy();
            this.smartContractDeploy.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OBJECTSTATE:
          if (field.type == TType.STRING) {
            this.objectState = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATETIME:
          if (field.type == TType.I64) {
            this.createTime = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRANSACTIONSCOUNT:
          if (field.type == TType.I32) {
            this.transactionsCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_address) {
        throw TProtocolError(TProtocolErrorType.UNKNOWN, "Required field 'address' was not found in serialized data! Struct: " + toString());
    }

    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ADDRESS_FIELD_DESC);
    oprot.writeBinary(this.address);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DEPLOYER_FIELD_DESC);
    oprot.writeBinary(this.deployer);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SMART_CONTRACT_DEPLOY_FIELD_DESC);
    this.smartContractDeploy.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_OBJECT_STATE_FIELD_DESC);
    oprot.writeBinary(this.objectState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CREATE_TIME_FIELD_DESC);
    oprot.writeI64(this.createTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TRANSACTIONS_COUNT_FIELD_DESC);
    oprot.writeI32(this.transactionsCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("SmartContract(");

    ret.write("address:");
    ret.write(this.address);

    ret.write(", ");
    ret.write("deployer:");
    ret.write(this.deployer);

    ret.write(", ");
    ret.write("smartContractDeploy:");
    ret.write(this.smartContractDeploy);

    ret.write(", ");
    ret.write("objectState:");
    ret.write("BINARY");

    ret.write(", ");
    ret.write("createTime:");
    ret.write(this.createTime);

    ret.write(", ");
    ret.write("transactionsCount:");
    ret.write(this.transactionsCount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // alas, we cannot check 'address' because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
  }

}

