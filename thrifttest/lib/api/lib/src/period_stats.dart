/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.period_stats;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'dart:typed_data';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:thrifttest/general/lib/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class PeriodStats implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("PeriodStats");
  static final TField _PERIOD_DURATION_FIELD_DESC = TField("periodDuration", TType.I64, 1);
  static final TField _POOLS_COUNT_FIELD_DESC = TField("poolsCount", TType.I32, 2);
  static final TField _TRANSACTIONS_COUNT_FIELD_DESC = TField("transactionsCount", TType.I32, 3);
  static final TField _BALANCE_PER_CURRENCY_FIELD_DESC = TField("balancePerCurrency", TType.MAP, 4);
  static final TField _SMART_CONTRACTS_COUNT_FIELD_DESC = TField("smartContractsCount", TType.I32, 5);
  static final TField _TRANSACTIONS_SMART_COUNT_FIELD_DESC = TField("transactionsSmartCount", TType.I32, 6);

  int _periodDuration = 0;
  static const int PERIODDURATION = 1;
  int _poolsCount = 0;
  static const int POOLSCOUNT = 2;
  int _transactionsCount = 0;
  static const int TRANSACTIONSCOUNT = 3;
  Map<int, CumulativeAmount> _balancePerCurrency = Map<int, CumulativeAmount>();
  static const int BALANCEPERCURRENCY = 4;
  int _smartContractsCount = 0;
  static const int SMARTCONTRACTSCOUNT = 5;
  int _transactionsSmartCount = 0;
  static const int TRANSACTIONSSMARTCOUNT = 6;


  PeriodStats() {
  }

  // periodDuration
  int get periodDuration => this._periodDuration;

  set periodDuration(int periodDuration) {
    this._periodDuration = periodDuration;
  }

  // poolsCount
  int get poolsCount => this._poolsCount;

  set poolsCount(int poolsCount) {
    this._poolsCount = poolsCount;
  }

  // transactionsCount
  int get transactionsCount => this._transactionsCount;

  set transactionsCount(int transactionsCount) {
    this._transactionsCount = transactionsCount;
  }

  // balancePerCurrency
  Map<int, CumulativeAmount> get balancePerCurrency => this._balancePerCurrency;

  set balancePerCurrency(Map<int, CumulativeAmount> balancePerCurrency) {
    this._balancePerCurrency = balancePerCurrency;
  }

  // smartContractsCount
  int get smartContractsCount => this._smartContractsCount;

  set smartContractsCount(int smartContractsCount) {
    this._smartContractsCount = smartContractsCount;
  }

  // transactionsSmartCount
  int get transactionsSmartCount => this._transactionsSmartCount;

  set transactionsSmartCount(int transactionsSmartCount) {
    this._transactionsSmartCount = transactionsSmartCount;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_periodDuration = false;
    bool __isset_poolsCount = false;
    bool __isset_transactionsCount = false;
    bool __isset_balancePerCurrency = false;
    bool __isset_smartContractsCount = false;
    bool __isset_transactionsSmartCount = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PERIODDURATION:
          if (field.type == TType.I64) {
            this.periodDuration = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case POOLSCOUNT:
          if (field.type == TType.I32) {
            this.poolsCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRANSACTIONSCOUNT:
          if (field.type == TType.I32) {
            this.transactionsCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BALANCEPERCURRENCY:
          if (field.type == TType.MAP) {
            {
              TMap _map40 = iprot.readMapBegin();
              this.balancePerCurrency = Map<int, CumulativeAmount>();
              for (int _i41 = 0; _i41 < _map40.length; ++_i41) {
                int _key42;
                CumulativeAmount _val43;
                _key42 = iprot.readByte();
                _val43 = CumulativeAmount();
                _val43.read(iprot);
                this.balancePerCurrency[_key42] = _val43;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SMARTCONTRACTSCOUNT:
          if (field.type == TType.I32) {
            this.smartContractsCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRANSACTIONSSMARTCOUNT:
          if (field.type == TType.I32) {
            this.transactionsSmartCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_PERIOD_DURATION_FIELD_DESC);
    oprot.writeI64(this.periodDuration);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_POOLS_COUNT_FIELD_DESC);
    oprot.writeI32(this.poolsCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TRANSACTIONS_COUNT_FIELD_DESC);
    oprot.writeI32(this.transactionsCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_BALANCE_PER_CURRENCY_FIELD_DESC);
    {
      oprot.writeMapBegin(TMap(TType.BYTE, TType.STRUCT, this.balancePerCurrency.length));
      for (var elem45 in this.balancePerCurrency.keys) {
        oprot.writeByte(elem45);
        this.balancePerCurrency[elem45]!.write(oprot);
      }
      oprot.writeMapEnd();
    }
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SMART_CONTRACTS_COUNT_FIELD_DESC);
    oprot.writeI32(this.smartContractsCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TRANSACTIONS_SMART_COUNT_FIELD_DESC);
    oprot.writeI32(this.transactionsSmartCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("PeriodStats(");

    ret.write("periodDuration:");
    ret.write(this.periodDuration);

    ret.write(", ");
    ret.write("poolsCount:");
    ret.write(this.poolsCount);

    ret.write(", ");
    ret.write("transactionsCount:");
    ret.write(this.transactionsCount);

    ret.write(", ");
    ret.write("balancePerCurrency:");
    ret.write(this.balancePerCurrency);

    ret.write(", ");
    ret.write("smartContractsCount:");
    ret.write(this.smartContractsCount);

    ret.write(", ");
    ret.write("transactionsSmartCount:");
    ret.write(this.transactionsSmartCount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

