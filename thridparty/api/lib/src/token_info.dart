/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.token_info;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:general/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class TokenInfo implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("TokenInfo");
  static final TField _ADDRESS_FIELD_DESC = TField("address", TType.STRING, 1);
  static final TField _CODE_FIELD_DESC = TField("code", TType.STRING, 2);
  static final TField _NAME_FIELD_DESC = TField("name", TType.STRING, 3);
  static final TField _TOTAL_SUPPLY_FIELD_DESC = TField("totalSupply", TType.STRING, 4);
  static final TField _OWNER_FIELD_DESC = TField("owner", TType.STRING, 5);
  static final TField _TRANSFERS_COUNT_FIELD_DESC = TField("transfersCount", TType.I32, 6);
  static final TField _TRANSACTIONS_COUNT_FIELD_DESC = TField("transactionsCount", TType.I32, 7);
  static final TField _HOLDERS_COUNT_FIELD_DESC = TField("holdersCount", TType.I32, 8);
  static final TField _TOKEN_STANDARD_FIELD_DESC = TField("tokenStandard", TType.I32, 9);

  Uint8List _address = "";
  static const int ADDRESS = 1;
  String _code = "";
  static const int CODE = 2;
  String _name = "";
  static const int NAME = 3;
  String _totalSupply = "";
  static const int TOTALSUPPLY = 4;
  Uint8List _owner = "";
  static const int OWNER = 5;
  int _transfersCount = 0;
  static const int TRANSFERSCOUNT = 6;
  int _transactionsCount = 0;
  static const int TRANSACTIONSCOUNT = 7;
  int _holdersCount = 0;
  static const int HOLDERSCOUNT = 8;
  int _tokenStandard = 0;
  static const int TOKENSTANDARD = 9;


  TokenInfo() {
  }

  // address
  Uint8List get address => this._address;

  set address(Uint8List address) {
    this._address = address;
  }

  // code
  String get code => this._code;

  set code(String code) {
    this._code = code;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  // totalSupply
  String get totalSupply => this._totalSupply;

  set totalSupply(String totalSupply) {
    this._totalSupply = totalSupply;
  }

  // owner
  Uint8List get owner => this._owner;

  set owner(Uint8List owner) {
    this._owner = owner;
  }

  // transfersCount
  int get transfersCount => this._transfersCount;

  set transfersCount(int transfersCount) {
    this._transfersCount = transfersCount;
  }

  // transactionsCount
  int get transactionsCount => this._transactionsCount;

  set transactionsCount(int transactionsCount) {
    this._transactionsCount = transactionsCount;
  }

  // holdersCount
  int get holdersCount => this._holdersCount;

  set holdersCount(int holdersCount) {
    this._holdersCount = holdersCount;
  }

  // tokenStandard
  int get tokenStandard => this._tokenStandard;

  set tokenStandard(int tokenStandard) {
    this._tokenStandard = tokenStandard;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_address = false;
    bool __isset_code = false;
    bool __isset_name = false;
    bool __isset_totalSupply = false;
    bool __isset_owner = false;
    bool __isset_transfersCount = false;
    bool __isset_transactionsCount = false;
    bool __isset_holdersCount = false;
    bool __isset_tokenStandard = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ADDRESS:
          if (field.type == TType.STRING) {
            this.address = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CODE:
          if (field.type == TType.STRING) {
            this.code = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALSUPPLY:
          if (field.type == TType.STRING) {
            this.totalSupply = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OWNER:
          if (field.type == TType.STRING) {
            this.owner = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRANSFERSCOUNT:
          if (field.type == TType.I32) {
            this.transfersCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRANSACTIONSCOUNT:
          if (field.type == TType.I32) {
            this.transactionsCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOLDERSCOUNT:
          if (field.type == TType.I32) {
            this.holdersCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOKENSTANDARD:
          if (field.type == TType.I32) {
            this.tokenStandard = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ADDRESS_FIELD_DESC);
    oprot.writeBinary(this.address);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CODE_FIELD_DESC);
    oprot.writeString(this.code);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NAME_FIELD_DESC);
    oprot.writeString(this.name);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOTAL_SUPPLY_FIELD_DESC);
    oprot.writeString(this.totalSupply);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_OWNER_FIELD_DESC);
    oprot.writeBinary(this.owner);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TRANSFERS_COUNT_FIELD_DESC);
    oprot.writeI32(this.transfersCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TRANSACTIONS_COUNT_FIELD_DESC);
    oprot.writeI32(this.transactionsCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_HOLDERS_COUNT_FIELD_DESC);
    oprot.writeI32(this.holdersCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOKEN_STANDARD_FIELD_DESC);
    oprot.writeI32(this.tokenStandard);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("TokenInfo(");

    ret.write("address:");
    ret.write(this.address);

    ret.write(", ");
    ret.write("code:");
    ret.write(this.code);

    ret.write(", ");
    ret.write("name:");
    ret.write(this.name);

    ret.write(", ");
    ret.write("totalSupply:");
    ret.write(this.totalSupply);

    ret.write(", ");
    ret.write("owner:");
    ret.write(this.owner);

    ret.write(", ");
    ret.write("transfersCount:");
    ret.write(this.transfersCount);

    ret.write(", ");
    ret.write("transactionsCount:");
    ret.write(this.transactionsCount);

    ret.write(", ");
    ret.write("holdersCount:");
    ret.write(this.holdersCount);

    ret.write(", ");
    ret.write("tokenStandard:");
    ret.write(this.tokenStandard);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

