/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library api.src.pool;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'transaction_type.dart';
import 'smart_operation_state.dart';
import 'transaction_state.dart';
import 'tokens_list_sort_field.dart';
import 'token_holders_sort_field.dart';
import 'wallets_list_sort.dart';
import 'package:general/general.dart' as t_general;
import 'amount_commission.dart';
import 'cumulative_amount.dart';
import 'smart_contract_deploy.dart';
import 'smart_contract.dart';
import 'smart_contract_invocation.dart';
import 'transaction_id.dart';
import 'token_deploy_trans_info.dart';
import 'token_transfer_trans_info.dart';
import 'smart_deploy_trans_info.dart';
import 'smart_execution_trans_info.dart';
import 'extra_fee.dart';
import 'smart_state_trans_info.dart';
import 'smart_trans_info.dart';
import 'transaction.dart';
import 'sealed_transaction.dart';
import 'short_transaction.dart';
import 'pool.dart';
import 'delegated_item.dart';
import 'delegated.dart';
import 'wallet_data.dart';
import 'period_stats.dart';
import 'wallet_data_get_result.dart';
import 'wallet_id_get_result.dart';
import 'wallet_transactions_count_get_result.dart';
import 'wallet_balance_get_result.dart';
import 'transaction_get_result.dart';
import 'transactions_get_result.dart';
import 'transaction_flow_result.dart';
import 'single_token_query.dart';
import 'single_query.dart';
import 'transactions_query.dart';
import 'selected_token_transfers.dart';
import 'public_key_transactions.dart';
import 'filtered_transactions_list_result.dart';
import 'pool_list_get_result.dart';
import 'pool_info_get_result.dart';
import 'pool_transactions_get_result.dart';
import 'stats_get_result.dart';
import 'smart_contract_get_result.dart';
import 'smart_contract_addresses_list_get_result.dart';
import 'smart_contracts_list_get_result.dart';
import 'transactions_state_get_result.dart';
import 'smart_method_params_get_result.dart';
import 'contract_all_methods_get_result.dart';
import 'smart_contract_method_argument.dart';
import 'smart_contract_method.dart';
import 'smart_contract_data_result.dart';
import 'smart_contract_compile_result.dart';
import 'token_info.dart';
import 'token_transaction.dart';
import 'token_holder.dart';
import 'token_balance.dart';
import 'token_balances_result.dart';
import 'token_transfer.dart';
import 'token_transfers_result.dart';
import 'token_transactions_result.dart';
import 'token_info_result.dart';
import 'token_holders_result.dart';
import 'send_transaction_result.dart';
import 'tokens_list_result.dart';
import 'wallet_info.dart';
import 'actual_fee_get_result.dart';
import 'wallets_get_result.dart';
import 'trusted_info.dart';
import 'trusted_get_result.dart';
import 'sync_state_result.dart';
import 'execute_count_get_result.dart';
import 'token_filters.dart';
import 'transactions_list.dart';
import 'transactions_list_flow_result.dart';
import 'multiple_request_ids.dart';
import 'addresses.dart';
import 'wallet_balance.dart';
import 'wallet_balance_full.dart';
import 'wallet_balance_results.dart';
import 'accepted_request_id.dart';
import 'round_data.dart';

class Pool implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("Pool");
  static final TField _HASH_FIELD_DESC = TField("hash", TType.STRING, 1);
  static final TField _PREV_HASH_FIELD_DESC = TField("prevHash", TType.STRING, 2);
  static final TField _TIME_FIELD_DESC = TField("time", TType.I64, 3);
  static final TField _TRANSACTIONS_COUNT_FIELD_DESC = TField("transactionsCount", TType.I32, 4);
  static final TField _POOL_NUMBER_FIELD_DESC = TField("poolNumber", TType.I64, 5);
  static final TField _WRITER_FIELD_DESC = TField("writer", TType.STRING, 6);
  static final TField _TOTAL_FEE_FIELD_DESC = TField("totalFee", TType.STRUCT, 7);
  static final TField _CONFIDANTS_FIELD_DESC = TField("confidants", TType.LIST, 8);
  static final TField _REAL_TRUSTED_FIELD_DESC = TField("realTrusted", TType.I64, 9);
  static final TField _NUMBER_TRUSTED_FIELD_DESC = TField("numberTrusted", TType.BYTE, 10);

  Uint8List _hash = "";
  static const int HASH = 1;
  Uint8List _prevHash = "";
  static const int PREVHASH = 2;
  int _time = 0;
  static const int TIME = 3;
  int _transactionsCount = 0;
  static const int TRANSACTIONSCOUNT = 4;
  int _poolNumber = 0;
  static const int POOLNUMBER = 5;
  Uint8List _writer = "";
  static const int WRITER = 6;
  t_general.Amount _totalFee = t_general.Amount();
  static const int TOTALFEE = 7;
  List<Uint8List> _confidants = [];
  static const int CONFIDANTS = 8;
  int _realTrusted = 0;
  static const int REALTRUSTED = 9;
  int _numberTrusted = 0;
  static const int NUMBERTRUSTED = 10;


  Pool() {
  }

  // hash
  Uint8List get hash => this._hash;

  set hash(Uint8List hash) {
    this._hash = hash;
  }

  // prevHash
  Uint8List get prevHash => this._prevHash;

  set prevHash(Uint8List prevHash) {
    this._prevHash = prevHash;
  }

  // time
  int get time => this._time;

  set time(int time) {
    this._time = time;
  }

  // transactionsCount
  int get transactionsCount => this._transactionsCount;

  set transactionsCount(int transactionsCount) {
    this._transactionsCount = transactionsCount;
  }

  // poolNumber
  int get poolNumber => this._poolNumber;

  set poolNumber(int poolNumber) {
    this._poolNumber = poolNumber;
  }

  // writer
  Uint8List get writer => this._writer;

  set writer(Uint8List writer) {
    this._writer = writer;
  }

  // totalFee
  t_general.Amount get totalFee => this._totalFee;

  set totalFee(t_general.Amount totalFee) {
    this._totalFee = totalFee;
  }

  // confidants
  List<Uint8List> get confidants => this._confidants;

  set confidants(List<Uint8List> confidants) {
    this._confidants = confidants;
  }

  // realTrusted
  int get realTrusted => this._realTrusted;

  set realTrusted(int realTrusted) {
    this._realTrusted = realTrusted;
  }

  // numberTrusted
  int get numberTrusted => this._numberTrusted;

  set numberTrusted(int numberTrusted) {
    this._numberTrusted = numberTrusted;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_hash = false;
    bool __isset_prevHash = false;
    bool __isset_time = false;
    bool __isset_transactionsCount = false;
    bool __isset_poolNumber = false;
    bool __isset_writer = false;
    bool __isset_totalFee = false;
    bool __isset_confidants = false;
    bool __isset_realTrusted = false;
    bool __isset_numberTrusted = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HASH:
          if (field.type == TType.STRING) {
            this.hash = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PREVHASH:
          if (field.type == TType.STRING) {
            this.prevHash = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TIME:
          if (field.type == TType.I64) {
            this.time = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRANSACTIONSCOUNT:
          if (field.type == TType.I32) {
            this.transactionsCount = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case POOLNUMBER:
          if (field.type == TType.I64) {
            this.poolNumber = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case WRITER:
          if (field.type == TType.STRING) {
            this.writer = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALFEE:
          if (field.type == TType.STRUCT) {
            this.totalFee = t_general.Amount();
            this.totalFee.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONFIDANTS:
          if (field.type == TType.LIST) {
            {
              TList _list28 = iprot.readListBegin();
              this.confidants = [];
              for (int _i29 = 0; _i29 < _list28.length; ++_i29) {
                Uint8List _elem30;//declare element for this.confidants
                _elem30 = iprot.readBinary();
                this.confidants.add(_elem30);//add element to parent this.confidants
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REALTRUSTED:
          if (field.type == TType.I64) {
            this.realTrusted = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUMBERTRUSTED:
          if (field.type == TType.BYTE) {
            this.numberTrusted = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_HASH_FIELD_DESC);
    oprot.writeBinary(this.hash);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PREV_HASH_FIELD_DESC);
    oprot.writeBinary(this.prevHash);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TIME_FIELD_DESC);
    oprot.writeI64(this.time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TRANSACTIONS_COUNT_FIELD_DESC);
    oprot.writeI32(this.transactionsCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_POOL_NUMBER_FIELD_DESC);
    oprot.writeI64(this.poolNumber);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_WRITER_FIELD_DESC);
    oprot.writeBinary(this.writer);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOTAL_FEE_FIELD_DESC);
    this.totalFee.write(oprot);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CONFIDANTS_FIELD_DESC);
    {
      oprot.writeListBegin(TList(TType.STRING, this.confidants.length));
      for (var elem31 in this.confidants) {
        oprot.writeBinary(elem31);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REAL_TRUSTED_FIELD_DESC);
    oprot.writeI64(this.realTrusted);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NUMBER_TRUSTED_FIELD_DESC);
    oprot.writeByte(this.numberTrusted);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("Pool(");

    ret.write("hash:");
    ret.write(this.hash);

    ret.write(", ");
    ret.write("prevHash:");
    ret.write(this.prevHash);

    ret.write(", ");
    ret.write("time:");
    ret.write(this.time);

    ret.write(", ");
    ret.write("transactionsCount:");
    ret.write(this.transactionsCount);

    ret.write(", ");
    ret.write("poolNumber:");
    ret.write(this.poolNumber);

    ret.write(", ");
    ret.write("writer:");
    ret.write(this.writer);

    ret.write(", ");
    ret.write("totalFee:");
    ret.write(this.totalFee);

    ret.write(", ");
    ret.write("confidants:");
    ret.write(this.confidants);

    ret.write(", ");
    ret.write("realTrusted:");
    ret.write(this.realTrusted);

    ret.write(", ");
    ret.write("numberTrusted:");
    ret.write(this.numberTrusted);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

