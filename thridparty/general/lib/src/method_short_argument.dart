/// Autogenerated by Thrift Compiler (0.20.0)
/// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
///  @generated


// ignore_for_file: unused_import
library general.src.method_short_argument;

//import 'package:thrift/src/protocol/t_protocol.dart';
import 'package:thrift/thrift.dart';
import 'class_object.dart';
import 'object.dart';
import 'amount.dart';
import 'variant.dart';
import 'annotation.dart';
import 'method_argument.dart';
import 'method_description.dart';
import 'byte_code_object.dart';
import 'method_signature.dart';
import 'method_short_argument.dart';
import 'method_short_description.dart';
import 'api_response.dart';

class MethodShortArgument implements TBase {
  static final TStruct _STRUCT_DESC = TStruct("MethodShortArgument");
  static final TField _TYPE_FIELD_DESC = TField("type", TType.STRING, 1);
  static final TField _NAME_FIELD_DESC = TField("name", TType.STRING, 2);

  String _type = "";
  static const int TYPE = 1;
  String _name = "";
  static const int NAME = 2;


  MethodShortArgument() {
  }

  // type
  String get type => this._type;

  set type(String type) {
    this._type = type;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  @override
  read(TProtocol iprot) {
    bool __isset_type = false;
    bool __isset_name = false;
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TYPE:
          if (field.type == TType.STRING) {
            this.type = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeString(this.type);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NAME_FIELD_DESC);
    oprot.writeString(this.name);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer("MethodShortArgument(");

    ret.write("type:");
    ret.write(this.type);

    ret.write(", ");
    ret.write("name:");
    ret.write(this.name);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

